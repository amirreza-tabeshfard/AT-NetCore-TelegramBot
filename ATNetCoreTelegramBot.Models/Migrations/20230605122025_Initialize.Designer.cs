// <auto-generated />
using System;
using ATNetCoreTelegramBot.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ATNetCoreTelegramBot.Models.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230605122025_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(500);

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(501);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_base.City.CultureId");

                    b.HasIndex("ProvinceId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_base.City.ProvinceId_Name");

                    b.ToTable("City", "base");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(500);

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(501);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_base.Country.CultureId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_base.Country.Name");

                    b.ToTable("Country", "base");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Culture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(500);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(4);

                    b.Property<string>("LanguageCultureName")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(501);

                    b.HasKey("Id");

                    b.HasIndex("CultureCode")
                        .IsUnique()
                        .HasDatabaseName("IX_base.Culture.CultureCode");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasDatabaseName("IX_base.Culture.DisplayName");

                    b.HasIndex("LanguageCultureName")
                        .IsUnique()
                        .HasDatabaseName("IX_base.Culture.LanguageCultureName");

                    b.ToTable("Culture", "base");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(500);

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(501);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_base.Province.CultureId");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_base.Province.CountryId_Name");

                    b.ToTable("Province", "base");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId")
                        .HasDatabaseName("IX_person.Address.AddressTypeId");

                    b.HasIndex("CityId")
                        .HasDatabaseName("IX_person.Address.CityId");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_person.Address.CultureId");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_person.Address.PersonId");

                    b.ToTable("Address", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_person.AddressType.CultureId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.AddressType.Name");

                    b.ToTable("AddressType", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.BirthCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.BirthCertificate.Name");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasDatabaseName("IX_person.BirthCertificate.PersonId");

                    b.ToTable("BirthCertificate", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Birthday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Name")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.Birthday.Name");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasDatabaseName("IX_person.Birthday.PersonId");

                    b.ToTable("Birthday", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("EmailTypeId")
                        .HasDatabaseName("IX_person.Email.EmailTypeId");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_person.Email.PersonId");

                    b.ToTable("Email", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_person.EmailType.CultureId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.EmailType.Name");

                    b.ToTable("EmailType", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.Gender.Name");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasDatabaseName("IX_person.Gender.PersonId");

                    b.ToTable("Gender", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.InstantMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<int>("InstantMessageTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("InstantMessageTypeId")
                        .HasDatabaseName("IX_person.InstantMessage.InstantMessageTypeId");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_person.InstantMessage.PersonId");

                    b.ToTable("InstantMessage", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.InstantMessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_person.InstantMessageType.CultureId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.InstantMessageType.Name");

                    b.ToTable("InstantMessageType", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.MaritalStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.MaritalStatus.Name");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasDatabaseName("IX_person.MaritalStatus.PersonId");

                    b.ToTable("MaritalStatus", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.MilitaryServiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.MilitaryServiceStatus.Name");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasDatabaseName("IX_person.MilitaryServiceStatus.PersonId");

                    b.ToTable("MilitaryServiceStatus", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.NationalCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.NationalCode.Name");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasDatabaseName("IX_person.NationalCode.PersonId");

                    b.ToTable("NationalCode", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("AboutMe")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7);

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)")
                        .HasColumnOrder(8);

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(3);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(4);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CultureId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_person.Person.CultureId_UserId");

                    b.ToTable("Person", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_person.Phone.PersonId");

                    b.HasIndex("PhoneTypeId")
                        .HasDatabaseName("IX_person.Phone.PhoneTypeId");

                    b.ToTable("Phone", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.PhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_person.PhoneType.CultureId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.PhoneType.Name");

                    b.ToTable("PhoneType", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<int>("SocialTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_person.Social.PersonId");

                    b.HasIndex("SocialTypeId")
                        .HasDatabaseName("IX_person.Social.SocialTypeId");

                    b.ToTable("Social", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.SocialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_person.SocialType.CultureId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.SocialType.Name");

                    b.ToTable("SocialType", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Url", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<int>("UrlTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_person.Url.PersonId");

                    b.HasIndex("UrlTypeId")
                        .HasDatabaseName("IX_person.Url.UrlTypeId");

                    b.ToTable("Url", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.UrlType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CultureId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("IX_person.UrlType.CultureId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_person.UrlType.Name");

                    b.ToTable("UrlType", "person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaTelegram.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_telegram.Channels.Name");

                    b.ToTable("Channels", "telegram");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaTelegram.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_telegram.Groups.Name");

                    b.ToTable("Groups", "telegram");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaTelegram.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("AddedToAttachmentMenu")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool?>("CanJoinGroups")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<bool?>("CanReadAllGroupMessages")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<long>("ChatID")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(12);

                    b.Property<bool>("IsBot")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(7);

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<bool?>("SupportsInlineQueries")
                        .HasColumnType("bit")
                        .HasColumnOrder(11);

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_telegram.Users.UserName")
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users", "telegram");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.City", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "CultureName")
                        .WithMany("Cities")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CultureName");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Country", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "CultureName")
                        .WithMany("Countries")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CultureName");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Province", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "CultureName")
                        .WithMany("Provinces")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("CultureName");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Address", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "Culture")
                        .WithMany("Addresses")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("City");

                    b.Navigation("Culture");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.AddressType", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "Culture")
                        .WithMany("AddressTypes")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.BirthCertificate", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("BirthCertificates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Birthday", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("Birthdays")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Email", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.EmailType", "EmailType")
                        .WithMany("Emails")
                        .HasForeignKey("EmailTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EmailType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.EmailType", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "Culture")
                        .WithMany("EmailTypes")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Gender", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("Genders")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.InstantMessage", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.InstantMessageType", "InstantMessageType")
                        .WithMany("InstantMessages")
                        .HasForeignKey("InstantMessageTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("InstantMessages")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InstantMessageType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.InstantMessageType", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "Culture")
                        .WithMany("InstantMessageTypes")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.MaritalStatus", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("MaritalStatuses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.MilitaryServiceStatus", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("MilitaryServiceStatuses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.NationalCode", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("NationalCodes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Person", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "Culture")
                        .WithMany("People")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaTelegram.User", "User")
                        .WithMany("People")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Phone", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.PhoneType", "PhoneType")
                        .WithMany("Phones")
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PhoneType");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.PhoneType", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "Culture")
                        .WithMany("PhoneTypes")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Social", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("Socials")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.SocialType", "SocialType")
                        .WithMany("Socials")
                        .HasForeignKey("SocialTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SocialType");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.SocialType", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "Culture")
                        .WithMany("SocialTypes")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Url", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.Person", "Person")
                        .WithMany("Urls")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaPerson.UrlType", "UrlType")
                        .WithMany("Urls")
                        .HasForeignKey("UrlTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("UrlType");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.UrlType", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Culture", "Culture")
                        .WithMany("UrlTypes")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Culture", b =>
                {
                    b.Navigation("AddressTypes");

                    b.Navigation("Addresses");

                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("EmailTypes");

                    b.Navigation("InstantMessageTypes");

                    b.Navigation("People");

                    b.Navigation("PhoneTypes");

                    b.Navigation("Provinces");

                    b.Navigation("SocialTypes");

                    b.Navigation("UrlTypes");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.EmailType", b =>
                {
                    b.Navigation("Emails");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.InstantMessageType", b =>
                {
                    b.Navigation("InstantMessages");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.Person", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BirthCertificates");

                    b.Navigation("Birthdays");

                    b.Navigation("Emails");

                    b.Navigation("Genders");

                    b.Navigation("InstantMessages");

                    b.Navigation("MaritalStatuses");

                    b.Navigation("MilitaryServiceStatuses");

                    b.Navigation("NationalCodes");

                    b.Navigation("Phones");

                    b.Navigation("Socials");

                    b.Navigation("Urls");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.PhoneType", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.SocialType", b =>
                {
                    b.Navigation("Socials");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaPerson.UrlType", b =>
                {
                    b.Navigation("Urls");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaTelegram.User", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
