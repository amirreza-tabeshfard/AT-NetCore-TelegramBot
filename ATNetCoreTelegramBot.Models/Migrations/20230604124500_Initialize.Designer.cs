// <auto-generated />
using System;
using ATNetCoreTelegramBot.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ATNetCoreTelegramBot.Models.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230604124500_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(500);

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(501);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_base.Cities.ProvinceId_Name");

                    b.ToTable("Cities", "base");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(500);

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(501);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_base.Countries.Name");

                    b.ToTable("Countries", "base");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(500);

                    b.Property<DateTime?>("LastUpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(501);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_base.Provinces.CountryId_Name");

                    b.ToTable("Provinces", "base");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaTelegram.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_telegram.Channels.Name");

                    b.ToTable("Channels", "telegram");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaTelegram.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_telegram.Groups.Name");

                    b.ToTable("Groups", "telegram");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaTelegram.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool?>("AddedToAttachmentMenu")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool?>("CanJoinGroups")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<bool?>("CanReadAllGroupMessages")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<long>("ChatID")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(12);

                    b.Property<bool>("IsBot")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(7);

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<bool?>("SupportsInlineQueries")
                        .HasColumnType("bit")
                        .HasColumnOrder(11);

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_telegram.Users.UserName")
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users", "telegram");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.City", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Province", b =>
                {
                    b.HasOne("ATNetCoreTelegramBot.Models.SchemaBase.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("ATNetCoreTelegramBot.Models.SchemaBase.Province", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
